pipeline {
  agent any

  tools {
    go 'go1.22.0'
  }

  environment {
    PROJECT_NAME   = 'jenkins-cicd-go-app'
    CODE_REPO      = 'https://github.com/jakirhosen9395/go-app-calculator.git'
    CODE_BRANCH    = 'cicd'
    IMAGE          = "${PROJECT_NAME}"
    TAG            = "${env.BUILD_NUMBER}"

    // Caches for faster builds
    GOMODCACHE     = "${WORKSPACE}/.gocache/mod"
    GOCACHE        = "${WORKSPACE}/.gocache/build"

    // Enable Docker BuildKit
    DOCKER_BUILDKIT = '1'
  }

  stages {

    stage('Checkout') {
      steps {
        git branch: "${CODE_BRANCH}", url: "${CODE_REPO}"
        sh 'go version'
      }
    }

    stage('Deps') {
      steps {
        sh '''
          mkdir -p "$GOMODCACHE" "$GOCACHE"
          go env -w GOMODCACHE="$GOMODCACHE"
          go env -w GOCACHE="$GOCACHE"
          go mod download
        '''
      }
    }

    stage('Unit Test') {
      steps {
        sh 'go test ./... -cover -coverprofile=coverage.out'
      }
    }

    stage('SonarQube') {
      environment {
        SONAR_TOKEN = credentials('SONAR_TOKEN')
      }
      steps {
        script {
          withSonarQubeEnv('sonarqubeServer') {
            def scannerHome = tool name: 'sonarqubeServer'
            sh """
              "${scannerHome}/bin/sonar-scanner" \
                -Dsonar.projectKey=go-app-calculator \
                -Dsonar.projectName=go-app-calculator \
                -Dsonar.sources=. \
                -Dsonar.exclusions=**/*_test.go,**/vendor/** \
                -Dsonar.go.coverage.reportPaths=coverage.out \
                -Dsonar.login=${SONAR_TOKEN}
            """
          }
        }
      }
    }

    stage('Archive coverage') {
      steps {
        archiveArtifacts artifacts: 'coverage.out', fingerprint: true
      }
    }

    stage('Build image') {
      steps {
        sh '''
          cp /opt/docker/Dockerfile .
          docker build -t ${IMAGE}:${TAG} .
        '''
      }
    }
    stage('Push image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'DOCKERHUB', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push ${IMAGE}:${TAG}
            docker logout
          '''
        }
      }
    }
  }
}
